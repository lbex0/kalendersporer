'use strict';
sap.ui.define([
    'sap/base/Log',
    'open/ux/preview/client/thirdparty/@sap-ux-private/control-property-editor-common',
    '../../utils/error',
    './nodes',
    '../../utils/info-center-message'
], function (Log, ___sap_ux_private_control_property_editor_common, ____utils_error, ___nodes, ____utils_info_center_message) {
    'use strict';
    const MessageBarType = ___sap_ux_private_control_property_editor_common['MessageBarType'];
    const outlineChanged = ___sap_ux_private_control_property_editor_common['outlineChanged'];
    const getError = ____utils_error['getError'];
    const transformNodes = ___nodes['transformNodes'];
    const sendInfoCenterMessage = ____utils_info_center_message['sendInfoCenterMessage'];
    const OUTLINE_CHANGE_EVENT = 'OUTLINE_CHANGED';
    class OutlineService extends EventTarget {
        constructor(rta, changeService) {
            super();
            this.rta = rta;
            this.changeService = changeService;
        }
        async init(sendAction) {
            const outline = await this.rta.getService('outline');
            const {scenario} = this.rta.getFlexSettings();
            const syncOutline = async () => {
                try {
                    const viewNodes = await outline.get();
                    const controlIndex = {};
                    const configPropertyIdMap = new Map();
                    const outlineNodes = await transformNodes(viewNodes, scenario, controlIndex, this.changeService, configPropertyIdMap);
                    const event = new CustomEvent(OUTLINE_CHANGE_EVENT, { detail: { controlIndex } });
                    this.dispatchEvent(event);
                    sendAction(outlineChanged(outlineNodes));
                    await this.changeService.updateConfigurationProps(configPropertyIdMap);
                } catch (error) {
                    const extendError = getError(error);
                    Log.error('Outline sync failed!', extendError);
                    await sendInfoCenterMessage({
                        title: { key: 'OUTLINE_ERROR_TITLE' },
                        description: extendError.message,
                        type: MessageBarType.error
                    });
                }
            };
            await syncOutline();
            outline.attachEvent('update', syncOutline);
        }
        onOutlineChange(handler) {
            this.addEventListener(OUTLINE_CHANGE_EVENT, handler);
        }
    }
    var __exports = { __esModule: true };
    __exports.OUTLINE_CHANGE_EVENT = OUTLINE_CHANGE_EVENT;
    __exports.OutlineService = OutlineService;
    return __exports;
});